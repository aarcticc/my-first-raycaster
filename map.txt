// ===== RAYCASTER MAP & ENEMIES =====
// Generiert für: 16x16 Map
// Datum: 25.7.2025

// === MAP.H ===
#define MAP_WIDTH 16
#define MAP_HEIGHT 16

// Textur-Definitionen
#define TEXTURE_EMPTY  0
#define TEXTURE_WOOD   1  // texture1.bmp
#define TEXTURE_STONE  2  // texture2.bmp
#define TEXTURE_MOSS   3  // texture3.bmp
#define TEXTURE_METAL  4  // texture4.bmp

// Feind-Definitionen
#define MAX_ENEMIES 3
typedef enum {
    ENEMY_GUARD,
    ENEMY_PATROL,
    ENEMY_BOSS
} EnemyType;

typedef struct {
    float x, y;           // Position
    EnemyType type;       // Feindtyp
    int health;           // Lebenspunkte
    int alive;            // Status
    float angle;          // Blickrichtung
} Enemy;

// === MAP.C ===
int map[MAP_HEIGHT][MAP_WIDTH] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,4,0,3,0,3,3,2,2,1,1,1,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,4,0,1,0,1,1,4,0,4,4,3,3,0,1},
    {1,0,0,0,0,0,1,0,4,0,0,0,3,0,0,1},
    {1,0,2,2,1,1,4,4,2,0,2,2,4,0,0,1},
    {1,0,0,0,1,0,0,0,2,0,2,0,0,0,0,1},
    {1,0,1,1,1,1,1,0,2,0,3,3,4,4,0,1},
    {1,0,0,0,0,0,0,0,2,0,3,0,4,0,0,1},
    {1,0,4,4,2,0,4,4,4,4,1,1,3,0,0,1},
    {1,0,4,0,0,0,4,0,0,0,1,0,3,0,0,1},
    {1,0,1,1,3,0,2,2,1,0,2,0,3,0,0,1},
    {1,0,1,0,0,0,2,0,1,0,2,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

// Feinde-Array
Enemy enemies[MAX_ENEMIES] = {
    {1.0f, 9.0f, ENEMY_GUARD, 25, 1, 0.0f},  // guard bei (1, 9)
    {1.0f, 2.0f, ENEMY_GUARD, 25, 1, 0.0f},  // guard bei (1, 2)
    {7.0f, 8.0f, ENEMY_GUARD, 25, 1, 0.0f}  // guard bei (7, 8)
};

// === ENEMY.C (Neue Datei) ===
#include "enemy.h"
#include <math.h>

// Feind initialisieren
void init_enemies() {
    for (int i = 0; i < MAX_ENEMIES; i++) {
        enemies[i].angle = (float)(rand() % 360) * M_PI / 180.0f;
    }
}

// Feinde updaten
void update_enemies(float deltaTime) {
    for (int i = 0; i < MAX_ENEMIES; i++) {
        if (!enemies[i].alive) continue;
        
        switch (enemies[i].type) {
            case ENEMY_PATROL:
                // Einfache Patrol-Logik
                enemies[i].angle += 0.5f * deltaTime;
                break;
            case ENEMY_GUARD:
                // Wächter bleiben statisch
                break;
            case ENEMY_BOSS:
                // Boss-spezifische Logik
                enemies[i].angle += 0.2f * deltaTime;
                break;
        }
    }
}

// Feind Schaden zufügen
void damage_enemy(int enemyIndex, int damage) {
    if (enemyIndex >= 0 && enemyIndex < MAX_ENEMIES) {
        enemies[enemyIndex].health -= damage;
        if (enemies[enemyIndex].health <= 0) {
            enemies[enemyIndex].alive = 0;
        }
    }
}

// === TEXTURE LOADING (Erweitert) ===
// Fügen Sie diese Funktion zu Ihrem bestehenden Code hinzu:
void load_textures() {
    // Laden Sie die 4 Texturen aus Ihrem Repository
    load_texture(&textures[1], "textures/texture1.bmp");  // Holz
    load_texture(&textures[2], "textures/texture2.bmp");  // Stein
    load_texture(&textures[3], "textures/texture3.bmp");  // Moos
    load_texture(&textures[4], "textures/texture4.bmp");  // Metall
}

// Erweiterte Textur-Auswahl im Raycasting:
int get_wall_texture(int wallValue) {
    return (wallValue >= 1 && wallValue <= 4) ? wallValue : 1;
}

// === INTEGRATION HINWEISE ===
// 1. Kopieren Sie die Map-Daten in Ihre map.c
// 2. Aktualisieren Sie MAP_WIDTH und MAP_HEIGHT in map.h
// 3. Erstellen Sie enemy.h und enemy.c für Feinde-System
// 4. Rufen Sie init_enemies() beim Spielstart auf
// 5. Rufen Sie update_enemies(deltaTime) im Game-Loop auf
// 6. Erweitern Sie Ihr Textur-System für 4 verschiedene Wand-Typen
// 7. Modifizieren Sie draw_scene() um verschiedene Texturen zu verwenden

// === STATISTIKEN ===
// Map-Größe: 16x16 = 256 Zellen
// Wände: 134, Leere Räume: 122
// Feinde: 3
//   guard: 3
